{"version":3,"file":"chunkWorker-C7rx3fH2.js","sources":["../node_modules/noisejs/index.js","../workers/chunkWorker.js"],"sourcesContent":["/*\n * A speed-improved perlin and simplex noise algorithms for 2D.\n *\n * Based on example code by Stefan Gustavson (stegu@itn.liu.se).\n * Optimisations by Peter Eastman (peastman@drizzle.stanford.edu).\n * Better rank ordering method by Stefan Gustavson in 2012.\n * Converted to Javascript by Joseph Gentle.\n *\n * Version 2012-03-09\n *\n * This code was placed in the public domain by its original author,\n * Stefan Gustavson. You may use it as you see fit, but\n * attribution is appreciated.\n *\n */\n\n(function(global){\n\n  // Passing in seed will seed this Noise instance\n  function Noise(seed) {\n    function Grad(x, y, z) {\n      this.x = x; this.y = y; this.z = z;\n    }\n\n    Grad.prototype.dot2 = function(x, y) {\n      return this.x*x + this.y*y;\n    };\n\n    Grad.prototype.dot3 = function(x, y, z) {\n      return this.x*x + this.y*y + this.z*z;\n    };\n\n    this.grad3 = [new Grad(1,1,0),new Grad(-1,1,0),new Grad(1,-1,0),new Grad(-1,-1,0),\n                 new Grad(1,0,1),new Grad(-1,0,1),new Grad(1,0,-1),new Grad(-1,0,-1),\n                 new Grad(0,1,1),new Grad(0,-1,1),new Grad(0,1,-1),new Grad(0,-1,-1)];\n\n    this.p = [151,160,137,91,90,15,\n    131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,\n    190, 6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,\n    88,237,149,56,87,174,20,125,136,171,168, 68,175,74,165,71,134,139,48,27,166,\n    77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,\n    102,143,54, 65,25,63,161, 1,216,80,73,209,76,132,187,208, 89,18,169,200,196,\n    135,130,116,188,159,86,164,100,109,198,173,186, 3,64,52,217,226,250,124,123,\n    5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,\n    223,183,170,213,119,248,152, 2,44,154,163, 70,221,153,101,155,167, 43,172,9,\n    129,22,39,253, 19,98,108,110,79,113,224,232,178,185, 112,104,218,246,97,228,\n    251,34,242,193,238,210,144,12,191,179,162,241, 81,51,145,235,249,14,239,107,\n    49,192,214, 31,181,199,106,157,184, 84,204,176,115,121,50,45,127, 4,150,254,\n    138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180];\n    // To remove the need for index wrapping, double the permutation table length\n    this.perm = new Array(512);\n    this.gradP = new Array(512);\n\n    this.seed(seed || 0);\n  }\n\n  // This isn't a very good seeding function, but it works ok. It supports 2^16\n  // different seed values. Write something better if you need more seeds.\n  Noise.prototype.seed = function(seed) {\n    if(seed > 0 && seed < 1) {\n      // Scale the seed out\n      seed *= 65536;\n    }\n\n    seed = Math.floor(seed);\n    if(seed < 256) {\n      seed |= seed << 8;\n    }\n\n    var p = this.p;\n    for(var i = 0; i < 256; i++) {\n      var v;\n      if (i & 1) {\n        v = p[i] ^ (seed & 255);\n      } else {\n        v = p[i] ^ ((seed>>8) & 255);\n      }\n\n      var perm = this.perm;\n      var gradP = this.gradP;\n      perm[i] = perm[i + 256] = v;\n      gradP[i] = gradP[i + 256] = this.grad3[v % 12];\n    }\n  };\n\n  /*\n  for(var i=0; i<256; i++) {\n    perm[i] = perm[i + 256] = p[i];\n    gradP[i] = gradP[i + 256] = grad3[perm[i] % 12];\n  }*/\n\n  // Skewing and unskewing factors for 2, 3, and 4 dimensions\n  var F2 = 0.5*(Math.sqrt(3)-1);\n  var G2 = (3-Math.sqrt(3))/6;\n\n  var F3 = 1/3;\n  var G3 = 1/6;\n\n  // 2D simplex noise\n  Noise.prototype.simplex2 = function(xin, yin) {\n    var n0, n1, n2; // Noise contributions from the three corners\n    // Skew the input space to determine which simplex cell we're in\n    var s = (xin+yin)*F2; // Hairy factor for 2D\n    var i = Math.floor(xin+s);\n    var j = Math.floor(yin+s);\n    var t = (i+j)*G2;\n    var x0 = xin-i+t; // The x,y distances from the cell origin, unskewed.\n    var y0 = yin-j+t;\n    // For the 2D case, the simplex shape is an equilateral triangle.\n    // Determine which simplex we are in.\n    var i1, j1; // Offsets for second (middle) corner of simplex in (i,j) coords\n    if(x0>y0) { // lower triangle, XY order: (0,0)->(1,0)->(1,1)\n      i1=1; j1=0;\n    } else {    // upper triangle, YX order: (0,0)->(0,1)->(1,1)\n      i1=0; j1=1;\n    }\n    // A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\n    // a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\n    // c = (3-sqrt(3))/6\n    var x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords\n    var y1 = y0 - j1 + G2;\n    var x2 = x0 - 1 + 2 * G2; // Offsets for last corner in (x,y) unskewed coords\n    var y2 = y0 - 1 + 2 * G2;\n    // Work out the hashed gradient indices of the three simplex corners\n    i &= 255;\n    j &= 255;\n\n    var perm = this.perm;\n    var gradP = this.gradP;\n    var gi0 = gradP[i+perm[j]];\n    var gi1 = gradP[i+i1+perm[j+j1]];\n    var gi2 = gradP[i+1+perm[j+1]];\n    // Calculate the contribution from the three corners\n    var t0 = 0.5 - x0*x0-y0*y0;\n    if(t0<0) {\n      n0 = 0;\n    } else {\n      t0 *= t0;\n      n0 = t0 * t0 * gi0.dot2(x0, y0);  // (x,y) of grad3 used for 2D gradient\n    }\n    var t1 = 0.5 - x1*x1-y1*y1;\n    if(t1<0) {\n      n1 = 0;\n    } else {\n      t1 *= t1;\n      n1 = t1 * t1 * gi1.dot2(x1, y1);\n    }\n    var t2 = 0.5 - x2*x2-y2*y2;\n    if(t2<0) {\n      n2 = 0;\n    } else {\n      t2 *= t2;\n      n2 = t2 * t2 * gi2.dot2(x2, y2);\n    }\n    // Add contributions from each corner to get the final noise value.\n    // The result is scaled to return values in the interval [-1,1].\n    return 70 * (n0 + n1 + n2);\n  };\n\n  // 3D simplex noise\n  Noise.prototype.simplex3 = function(xin, yin, zin) {\n    var n0, n1, n2, n3; // Noise contributions from the four corners\n\n    // Skew the input space to determine which simplex cell we're in\n    var s = (xin+yin+zin)*F3; // Hairy factor for 2D\n    var i = Math.floor(xin+s);\n    var j = Math.floor(yin+s);\n    var k = Math.floor(zin+s);\n\n    var t = (i+j+k)*G3;\n    var x0 = xin-i+t; // The x,y distances from the cell origin, unskewed.\n    var y0 = yin-j+t;\n    var z0 = zin-k+t;\n\n    // For the 3D case, the simplex shape is a slightly irregular tetrahedron.\n    // Determine which simplex we are in.\n    var i1, j1, k1; // Offsets for second corner of simplex in (i,j,k) coords\n    var i2, j2, k2; // Offsets for third corner of simplex in (i,j,k) coords\n    if(x0 >= y0) {\n      if(y0 >= z0)      { i1=1; j1=0; k1=0; i2=1; j2=1; k2=0; }\n      else if(x0 >= z0) { i1=1; j1=0; k1=0; i2=1; j2=0; k2=1; }\n      else              { i1=0; j1=0; k1=1; i2=1; j2=0; k2=1; }\n    } else {\n      if(y0 < z0)      { i1=0; j1=0; k1=1; i2=0; j2=1; k2=1; }\n      else if(x0 < z0) { i1=0; j1=1; k1=0; i2=0; j2=1; k2=1; }\n      else             { i1=0; j1=1; k1=0; i2=1; j2=1; k2=0; }\n    }\n    // A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),\n    // a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and\n    // a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where\n    // c = 1/6.\n    var x1 = x0 - i1 + G3; // Offsets for second corner\n    var y1 = y0 - j1 + G3;\n    var z1 = z0 - k1 + G3;\n\n    var x2 = x0 - i2 + 2 * G3; // Offsets for third corner\n    var y2 = y0 - j2 + 2 * G3;\n    var z2 = z0 - k2 + 2 * G3;\n\n    var x3 = x0 - 1 + 3 * G3; // Offsets for fourth corner\n    var y3 = y0 - 1 + 3 * G3;\n    var z3 = z0 - 1 + 3 * G3;\n\n    // Work out the hashed gradient indices of the four simplex corners\n    i &= 255;\n    j &= 255;\n    k &= 255;\n\n    var perm = this.perm;\n    var gradP = this.gradP;\n    var gi0 = gradP[i+   perm[j+   perm[k   ]]];\n    var gi1 = gradP[i+i1+perm[j+j1+perm[k+k1]]];\n    var gi2 = gradP[i+i2+perm[j+j2+perm[k+k2]]];\n    var gi3 = gradP[i+ 1+perm[j+ 1+perm[k+ 1]]];\n\n    // Calculate the contribution from the four corners\n    var t0 = 0.5 - x0*x0-y0*y0-z0*z0;\n    if(t0<0) {\n      n0 = 0;\n    } else {\n      t0 *= t0;\n      n0 = t0 * t0 * gi0.dot3(x0, y0, z0);  // (x,y) of grad3 used for 2D gradient\n    }\n    var t1 = 0.5 - x1*x1-y1*y1-z1*z1;\n    if(t1<0) {\n      n1 = 0;\n    } else {\n      t1 *= t1;\n      n1 = t1 * t1 * gi1.dot3(x1, y1, z1);\n    }\n    var t2 = 0.5 - x2*x2-y2*y2-z2*z2;\n    if(t2<0) {\n      n2 = 0;\n    } else {\n      t2 *= t2;\n      n2 = t2 * t2 * gi2.dot3(x2, y2, z2);\n    }\n    var t3 = 0.5 - x3*x3-y3*y3-z3*z3;\n    if(t3<0) {\n      n3 = 0;\n    } else {\n      t3 *= t3;\n      n3 = t3 * t3 * gi3.dot3(x3, y3, z3);\n    }\n    // Add contributions from each corner to get the final noise value.\n    // The result is scaled to return values in the interval [-1,1].\n    return 32 * (n0 + n1 + n2 + n3);\n\n  };\n\n  // ##### Perlin noise stuff\n\n  function fade(t) {\n    return t*t*t*(t*(t*6-15)+10);\n  }\n\n  function lerp(a, b, t) {\n    return (1-t)*a + t*b;\n  }\n\n  // 2D Perlin Noise\n  Noise.prototype.perlin2 = function(x, y) {\n    // Find unit grid cell containing point\n    var X = Math.floor(x), Y = Math.floor(y);\n    // Get relative xy coordinates of point within that cell\n    x = x - X; y = y - Y;\n    // Wrap the integer cells at 255 (smaller integer period can be introduced here)\n    X = X & 255; Y = Y & 255;\n\n    // Calculate noise contributions from each of the four corners\n    var perm = this.perm;\n    var gradP = this.gradP;\n    var n00 = gradP[X+perm[Y]].dot2(x, y);\n    var n01 = gradP[X+perm[Y+1]].dot2(x, y-1);\n    var n10 = gradP[X+1+perm[Y]].dot2(x-1, y);\n    var n11 = gradP[X+1+perm[Y+1]].dot2(x-1, y-1);\n\n    // Compute the fade curve value for x\n    var u = fade(x);\n\n    // Interpolate the four results\n    return lerp(\n        lerp(n00, n10, u),\n        lerp(n01, n11, u),\n       fade(y));\n  };\n\n  // 3D Perlin Noise\n  Noise.prototype.perlin3 = function(x, y, z) {\n    // Find unit grid cell containing point\n    var X = Math.floor(x), Y = Math.floor(y), Z = Math.floor(z);\n    // Get relative xyz coordinates of point within that cell\n    x = x - X; y = y - Y; z = z - Z;\n    // Wrap the integer cells at 255 (smaller integer period can be introduced here)\n    X = X & 255; Y = Y & 255; Z = Z & 255;\n\n    // Calculate noise contributions from each of the eight corners\n    var perm = this.perm;\n    var gradP = this.gradP;\n    var n000 = gradP[X+  perm[Y+  perm[Z  ]]].dot3(x,   y,     z);\n    var n001 = gradP[X+  perm[Y+  perm[Z+1]]].dot3(x,   y,   z-1);\n    var n010 = gradP[X+  perm[Y+1+perm[Z  ]]].dot3(x,   y-1,   z);\n    var n011 = gradP[X+  perm[Y+1+perm[Z+1]]].dot3(x,   y-1, z-1);\n    var n100 = gradP[X+1+perm[Y+  perm[Z  ]]].dot3(x-1,   y,   z);\n    var n101 = gradP[X+1+perm[Y+  perm[Z+1]]].dot3(x-1,   y, z-1);\n    var n110 = gradP[X+1+perm[Y+1+perm[Z  ]]].dot3(x-1, y-1,   z);\n    var n111 = gradP[X+1+perm[Y+1+perm[Z+1]]].dot3(x-1, y-1, z-1);\n\n    // Compute the fade curve value for x, y, z\n    var u = fade(x);\n    var v = fade(y);\n    var w = fade(z);\n\n    // Interpolate\n    return lerp(\n        lerp(\n          lerp(n000, n100, u),\n          lerp(n001, n101, u), w),\n        lerp(\n          lerp(n010, n110, u),\n          lerp(n011, n111, u), w),\n       v);\n  };\n\n  global.Noise = Noise;\n\n})(typeof module === \"undefined\" ? this : module.exports);\n","import { Noise } from 'noisejs';\n// chunkWorker.js - Web Worker for chunk generation\n\n// Global variables\nlet noiseLib = new Noise();\nlet terrainGen = null;\n\n// Handle messages from the main thread\nself.onmessage = function(e) {\n  const { type, data } = e.data;\n  \n  switch (type) {\n    case 'init':\n      // Initialize the worker with noise and terrain generator\n      //noiseLib = new SimpleNoise(data.seed);\n      terrainGen = createTerrainGenerator(data.seed, data.params);\n      self.postMessage({ type: 'initialized' });\n      break;\n      \n    case 'generateChunk':\n      // Generate a chunk with the given coordinates\n      try {\n        // Measure start time\n        const startTime = performance.now();\n        \n        const { chunkX, chunkZ, chunkSize, debug_more_poppies } = data;\n        const chunkData = generateChunk(chunkX, chunkZ, chunkSize, { debug_more_poppies });\n        \n        // Measure end time\n        const endTime = performance.now();\n        const generationTime = endTime - startTime;\n        \n        // Send the generated chunk back to the main thread\n        self.postMessage({\n          type: 'chunkGenerated',\n          data: {\n            chunkX,\n            chunkZ,\n            chunkData,\n            requestId: data.requestId,\n            generationTime\n          }\n        });\n      } catch (error) {\n        self.postMessage({\n          type: 'error',\n          data: {\n            message: error.message,\n            requestId: data.requestId\n          }\n        });\n      }\n      break;\n      \n    default:\n      console.error('Unknown message type:', type);\n  }\n};\n\n// Create a terrain generator with the given seed and parameters\nfunction createTerrainGenerator(seed, params) {\n  // Create a simplified terrain generator\n  return {\n    seed,\n    params: params || {\n      seaLevel: 20,\n      minHeight: 0,\n      maxHeight: 64,\n      heightFreq: 0.3,\n      heightAmp: 10,\n      caveFreq: 0.8,\n      caveThreshold: 0.6\n    }\n  };\n}\n\n// Generate a chunk with the given coordinates\n/*\nfunction generateChunk(chunkX, chunkZ, chunkSize) {\n  if (!terrainGen) {\n    throw new Error('Terrain generator not initialized');\n  }\n  \n  const heightDimension = terrainGen.params?.maxHeight || 64;\n  \n  // Create a 3D array for the chunk data\n  const chunkData = new Array(chunkSize);\n  for (let x = 0; x < chunkSize; x++) {\n    chunkData[x] = new Array(chunkSize);\n    for (let z = 0; z < chunkSize; z++) {\n      chunkData[x][z] = new Array(heightDimension).fill(0); // 0 = air\n    }\n  }\n  \n  // Generate terrain using the noise generator\n  const worldX = chunkX * chunkSize;\n  const worldZ = chunkZ * chunkSize;\n  \n  // Fill the chunk with blocks based on the terrain generator's algorithms\n  for (let x = 0; x < chunkSize; x++) {\n    for (let z = 0; z < chunkSize; z++) {\n    \n      if (Math.random() > 0.5) {\n        chunkData[x][z][0] = 1; // 4 = water\n      }\n      \n    }\n  }\n  \n  // Add caves and structures\n  //addCaves(chunkData, chunkX, chunkZ, chunkSize);\n  \n  return chunkData;\n}\n*/\n/*\nfunction generateChunk(chunkX, chunkZ, chunkSize, options = {}) {\n  if (!terrainGen || !noiseLib) {\n    throw new Error('Terrain generator not initialized');\n  }\n  \n  // Extract options with defaults\n  const { debug_more_poppies = false } = options;\n\n  const { seaLevel, maxHeight, heightAmp, heightFreq } = terrainGen.params;\n  const worldX = chunkX * chunkSize;\n  const worldZ = chunkZ * chunkSize;\n  const chunkData = new Array(chunkSize);\n\n  for (let x = 0; x < chunkSize; x++) {\n    chunkData[x] = new Array(chunkSize);\n    for (let z = 0; z < chunkSize; z++) {\n      chunkData[x][z] = new Array(maxHeight).fill(0); // Fill with air\n      const globalX = worldX + x;\n      const globalZ = worldZ + z;\n\n      // --- HEIGHT MAP: multiple octaves for fractal cliffs ---\n      const baseFreq = 0.01;\n      const e = (\n        1.0 * noiseLib.perlin2(baseFreq * globalX, baseFreq * globalZ) +\n        0.5 * noiseLib.perlin2(2 * baseFreq * globalX + 5.3, 2 * baseFreq * globalZ + 9.1) +\n        0.25 * noiseLib.perlin2(4 * baseFreq * globalX + 13.7, 4 * baseFreq * globalZ + 17.3)\n      ) / (1.0 + 0.5 + 0.25);\n\n      // Emphasize cliffs and flatten valleys\n      let elevation = Math.pow(e, 1.2);\n      let height = Math.floor(seaLevel + heightAmp * elevation);\n      height = Math.max(1, Math.min(maxHeight - 1, height));\n\n      // --- TERRAIN LAYERS ---\n      for (let y = 0; y <= height; y++) {\n        if (y === height) {\n          chunkData[x][z][y] = 1; // Top layer: grass_block\n        } else if (y >= height - 2) {\n          chunkData[x][z][y] = 2; // Mid layer: dirt\n        } else {\n          chunkData[x][z][y] = 3; // Base layer: stone\n        }\n      }\n\n      // --- WATER: fill up valleys below sea level ---\n      if (height < seaLevel) {\n        for (let y = height + 1; y <= seaLevel; y++) {\n          chunkData[x][z][y] = 4; // water\n        }\n      }\n\n      // --- FLOWERS: place poppies sparsely on grass ---\n      // If debug_more_poppies is set, create a lot more flowers\n      const flowerChance = debug_more_poppies ? 0.8 : 0.25;\n      \n      // Checker pattern for debugging\n      const isFlowerSpot = (worldX + worldZ) % 2 === 0;\n      \n      if (\n        (debug_more_poppies && isFlowerSpot) ||\n        (noiseLib.perlin2(globalX * 0.5, globalZ * 0.5) > 0.1 &&\n        Math.random() < flowerChance &&\n        height >= seaLevel - 1 &&\n        chunkData[x][z][height] === 1)\n      ) {\n        chunkData[x][z][height + 1] = 5; // poppy above grass (5 is the block ID for poppies)\n        // Print debug info for the first several poppies\n        if (chunkX === 0 && chunkZ === 0 && x < 8 && z < 8) {\n          console.log(\"Generated poppy at chunk position\", x, height+1, z);\n        }\n      }\n    }\n  }\n\n  return chunkData;\n}\n*/\n\nfunction generateChunk(chunkX, chunkZ, chunkSize, options = {}) {\n  if (!terrainGen || !noiseLib) {\n    throw new Error('Terrain generator not initialized');\n  }\n  \n  // Extract options with defaults\n  const { debug_more_poppies = false } = options;\n\n  const { seaLevel, maxHeight, heightAmp } = terrainGen.params;\n  const worldX = chunkX * chunkSize;\n  const worldZ = chunkZ * chunkSize;\n  const chunkData = new Array(chunkSize);\n\n  // Precompute height and moisture maps for better organization\n  const heightMap = new Array(chunkSize);\n  const moistureMap = new Array(chunkSize);\n\n  for (let x = 0; x < chunkSize; x++) {\n    heightMap[x] = new Array(chunkSize);\n    moistureMap[x] = new Array(chunkSize);\n    \n    for (let z = 0; z < chunkSize; z++) {\n      const globalX = worldX + x;\n      const globalZ = worldZ + z;\n      \n      // --- IMPROVED HEIGHT MAP: multiple octaves with domain warping ---\n      const baseFreq = 0.05;\n      \n      // Apply domain warping for more natural, less grid-like terrain\n      const warpX = 0.1 * noiseLib.perlin2(globalX * 0.05, globalZ * 0.05);\n      const warpZ = 0.1 * noiseLib.perlin2(globalX * 0.05 + 500, globalZ * 0.05 + 500);\n      \n      // Multiple octaves with correct offsets to avoid correlation\n      const e = (\n        1.0 * noiseLib.perlin2(baseFreq * (globalX + warpX), baseFreq * (globalZ + warpZ)) +\n        0.5 * noiseLib.perlin2(2 * baseFreq * (globalX + warpX) + 5.3, 2 * baseFreq * (globalZ + warpZ) + 9.1) +\n        0.25 * noiseLib.perlin2(4 * baseFreq * (globalX + warpX) + 13.7, 4 * baseFreq * (globalZ + warpZ) + 17.3)\n      ) / (1.0 + 0.5 + 0.25);\n      \n      // Emphasize terrain features with adjusted power curve\n      const elevation = Math.pow(e, 2.3);\n      let height = Math.floor(seaLevel + heightAmp * elevation);\n      height = Math.max(1, Math.min(maxHeight - 1, height));\n      \n      heightMap[x][z] = height;\n      \n      // --- MOISTURE MAP: for biome variation ---\n      // Use different frequencies and offsets for uncorrelated moisture\n      moistureMap[x][z] = (\n        noiseLib.perlin2(baseFreq * globalX + 300, baseFreq * globalZ + 900) + 1\n      ) * 0.5; // Convert from [-1,1] to [0,1]\n    }\n  }\n\n  // Generate the 3D chunk data using the precomputed maps\n  for (let x = 0; x < chunkSize; x++) {\n    chunkData[x] = new Array(chunkSize);\n    \n    for (let z = 0; z < chunkSize; z++) {\n      chunkData[x][z] = new Array(maxHeight).fill(0); // Fill with air\n      \n      const globalX = worldX + x;\n      const globalZ = worldZ + z;\n      const height = heightMap[x][z];\n      const moisture = moistureMap[x][z];\n      \n      // --- TERRAIN LAYERS: with moisture-based variation ---\n      // Vary dirt depth based on moisture (wetter = deeper soil)\n      const dirtDepth = 2 + Math.floor(moisture * 2);\n      \n      for (let y = 0; y <= height; y++) {\n        if (y === height) {\n          chunkData[x][z][y] = 1; // Top layer: grass_block\n        } else if (y >= height - dirtDepth) {\n          chunkData[x][z][y] = 2; // Mid layer: dirt with variable depth\n        } else {\n          chunkData[x][z][y] = 3; // Base layer: stone\n        }\n      }\n      \n      // --- WATER: fill up valleys below sea level ---\n      if (height < seaLevel) {\n        for (let y = height + 1; y <= seaLevel; y++) {\n          chunkData[x][z][y] = 4; // water\n        }\n      }\n      \n      // --- IMPROVED VEGETATION PLACEMENT: using noise patterns ---\n      // Only place vegetation on grass blocks above water level\n      if (height >= seaLevel - 1 && chunkData[x][z][height] === 1) {\n        // Base flower chance on moisture (more flowers in medium moisture areas)\n        let flowerChance = debug_more_poppies ? 0.8 : 0.15;\n        \n        // Adjust chance based on moisture - peak at moderate moisture levels\n        const moistureModifier = 1.0 - Math.abs((moisture - 0.6) * 2.5);\n        flowerChance *= Math.max(0.1, moistureModifier);\n        \n        // Use noise for natural flower patches \n        // Higher frequency noise creates smaller, more detailed patches\n        const flowerNoise = noiseLib.perlin2(globalX * 0.2, globalZ * 0.2);\n        \n        if (flowerNoise > 0.3 && Math.random() < flowerChance) {\n          chunkData[x][z][height + 1] = 5; // poppy above grass\n          \n          // Print debug info for the first several poppies\n          if (chunkX === 0 && chunkZ === 0 && x < 8 && z < 8) {\n            console.log(\"Generated poppy at chunk position\", x, height+1, z);\n          }\n        }\n      }\n    }\n  }\n\n  return chunkData;\n}\n\n\n\n\n// Get the terrain height at the given world coordinates\nfunction getHeight(worldX, worldZ) {\n  // Default height generation if terrainGen is not available\n  if (!terrainGen) {\n    return 20;\n  }\n  \n  return Math.floor(\n    terrainGen.params.seaLevel + \n    terrainGen.params.heightAmp * \n    (noiseLib.perlin2(worldX * 0.01, worldZ * 0.01) + 0.5)\n  );\n}\n\n// Get the block type at the given world coordinates\nfunction getBlockType(worldX, worldY, worldZ, surfaceHeight) {\n  // Default block types if terrainGen is not available\n  return 0;\n\n  if (!terrainGen) {\n    return worldY < 5 ? 3 : 2; // 3 = stone, 2 = dirt\n  }\n  \n  // Define block types based on depth from surface\n  if (worldY === surfaceHeight - 1) {\n    return 1; // 1 = grass\n  } else if (worldY > surfaceHeight - 4) {\n    return 2; // 2 = dirt\n  } else {\n    return 3; // 3 = stone\n  }\n}\n\n// Add caves to the chunk\nfunction addCaves(chunkData, chunkX, chunkZ, chunkSize) {\n  if (!terrainGen || !noiseLib) return;\n  \n  const caveFreq = terrainGen.params.caveFreq || 0.1;\n  const caveThreshold = terrainGen.params.caveThreshold || 0.6;\n  const worldX = chunkX * chunkSize;\n  const worldZ = chunkZ * chunkSize;\n  \n  for (let x = 0; x < chunkSize; x++) {\n    for (let z = 0; z < chunkSize; z++) {\n      for (let y = 1; y < terrainGen.params.seaLevel - 2; y++) {\n        // Only carve caves in existing blocks (not air or water)\n        if (chunkData[x][z][y] > 0 && chunkData[x][z][y] !== 4) {\n          const nx = (worldX + x) * caveFreq;\n          const ny = y * caveFreq;\n          const nz = (worldZ + z) * caveFreq;\n          \n          // Use 3D Perlin noise for caves\n          const caveValue = noiseLib.perlin3(nx, ny, nz);\n          \n          if (caveValue > caveThreshold) {\n            chunkData[x][z][y] = 0; // 0 = air (carve out the cave)\n          }\n        }\n      }\n    }\n  }\n}\n"],"names":["global","Noise","seed","Grad","x","y","z","p","i","v","perm","gradP","F2","G2","F3","G3","xin","yin","n0","n1","n2","s","j","t","x0","y0","i1","j1","x1","y1","x2","y2","gi0","gi1","gi2","t0","t1","t2","zin","n3","k","z0","k1","i2","j2","k2","z1","z2","x3","y3","z3","gi3","t3","fade","lerp","a","b","X","Y","n00","n01","n10","n11","u","Z","n000","n001","n010","n011","n100","n101","n110","n111","w","module","noiseLib","terrainGen","e","type","data","createTerrainGenerator","startTime","chunkX","chunkZ","chunkSize","debug_more_poppies","chunkData","generateChunk","generationTime","error","params","options","seaLevel","maxHeight","heightAmp","worldX","worldZ","heightMap","moistureMap","globalX","globalZ","baseFreq","warpX","warpZ","elevation","height","moisture","dirtDepth","flowerChance","moistureModifier"],"mappings":"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","x_google_ignoreList":[0]}